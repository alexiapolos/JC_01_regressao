---
title: "Journal Club 1: Modelos de Regressão "
subtitle: "Banco de dados: doença cardíaca"
author: "LiaaOnco"
date: "`r Sys.Date()`"
output:
  html_document:
    toc: true
    toc_depth: 2
---

## Introdução

Nesta aula prática, aplicaremos três tipos de modelos de regressão em dados de saúde: <br> 1. **Regressão Linear Simples**: Visa estabelecer uma relação linear entre uma variável dependente e uma variável independente (quantitativa). <br> 2. **Regressão Linear Múltipla**: Visa estabelecer uma relação linear entre uma variável dependente e múltiplas variável independentes. .<br> 3. **Modelos Não Lineares**: Investigam padrões não lineares entre as variáveis. Podem incluir funções polinomiais, exponenciais, logarítmicas, dentre outras.<br>

## Carregamento de dados e pacotes

```{r, include = FALSE}

# Carregar pacotes
library(tidyverse)
library(ggpmisc)
library(tidyverse)
library(ggplot2)
library(ggpmisc)
library(caret)
library(broom)
library(plotly)

# Carregar e limpar os dados
dados <- read.csv("heart.csv") %>% 
  rename(
    idade = age,
    sexo = sex,
    tipo_dor_toracica = cp,
    pressao_repouso = trestbps,
    colesterol = chol,
    glicose_jejum = fbs,
    ecg_repouso = restecg,
    freq_cardiaca_max = thalach,
    angina_exercicio = exang,
    depressao_st = oldpeak,
    incl_st = slope,
    vasos_coloridos = ca,
    thal = thal,
    doenca_cardiaca = target
  ) %>%
  mutate(
    sexo = factor(sexo, levels = c(0, 1), labels = c("Feminino", "Masculino")),
    tipo_dor_toracica = factor(tipo_dor_toracica, levels = 0:3, 
                               labels = c("Angina típica", "Angina atípica", "Dor não anginosa", "Assintomático")),
    glicose_jejum = factor(glicose_jejum, levels = c(0, 1), labels = c("<= 120 mg/dl", "> 120 mg/dl")),
    ecg_repouso = factor(ecg_repouso, levels = 0:2, 
                         labels = c("Normal", "Anormalidade ST-T", "Hipertrofia ventricular esquerda")),
    angina_exercicio = factor(angina_exercicio, levels = c(0, 1), labels = c("Não", "Sim")),
    incl_st = factor(incl_st, levels = 0:2, 
                     labels = c("Descendente", "Plano", "Ascendente")),
    vasos_coloridos = factor(vasos_coloridos, levels = 0:3, 
                             labels = c("0 vasos", "1 vaso", "2 vasos", "3 vasos")),
    thal = factor(thal, levels = c(0, 1, 2, 3), 
                  labels = c("Normal", "Defeito fixo", "Defeito reversível", "Desconhecido")),
    doenca_cardiaca = factor(doenca_cardiaca, levels = c(0, 1), labels = c("Ausente", "Presente"))
  )

```

Estrutura do banco de dados 
```{r}
# Verificar a estrutura dos dados
glimpse(dados)
```

## Particionamento

```{r}
set.seed(362)

# Particionamento
train_index <- sample(1:nrow(dados), size = 0.8 * nrow(dados))
train_data <- dados[train_index, ]
test_data <- dados[-train_index, ]

dim(train_data)
dim(test_data)
```

## Regressão Linear Simples

**Objetivo**: Analisar a relação entre a pressão arterial em repouso e os níveis de colesterol sérico.

### Modelagem

```{r}
# Ajuste do modelo
linear_model <- lm(colesterol ~ pressao_repouso, data = train_data)

# Resumo do modelo
summary(linear_model)

# Previsão
linear_preds <- test_data %>%
  mutate(pred = predict(linear_model, newdata = test_data))

# Desempenho
linear_metrics <- linear_preds %>%
  summarise(
    R2 = cor(colesterol, pred)^2,
    RMSE = sqrt(mean((colesterol - pred)^2))
  )

linear_metrics

```

### Visualização

```{r}
ggplot(train_data, aes(x = pressao_repouso, y = colesterol)) +
  geom_point(color = "darkblue", size = 2, alpha = 0.8) +
  geom_smooth(method = "lm", color = "firebrick", se = TRUE) +
  labs(
    title = "Regressão Linear Simples",
    x = "Pressão Arterial em Repouso",
    y = "Colesterol Sérico"
  ) +
  theme_minimal()
```

## Regressão Linear Múltipla

**Objetivo**: Avaliar o impacto de idade, sexo e  pressão arterial em repouso nos níveis de colesterol sérico.

### Modelagem

```{r}
# Ajuste do modelo
multiple_model <- lm(colesterol ~ idade +
                      sexo + pressao_repouso, data = train_data)

# Resumo do modelo
summary(multiple_model)

# Previsão
multiple_preds <- test_data %>%
  mutate(pred = predict(multiple_model, newdata = test_data))

# Desempenho
multiple_metrics <- multiple_preds %>%
  summarise(
    R2 = cor(colesterol, pred)^2,
    RMSE = sqrt(mean((colesterol - pred)^2))
  )

multiple_metrics

```

### Visualização

```{r}

# Gerar grid para variáveis contínuas
grid_data <- expand.grid(
  idade = seq(min(train_data$idade), 
              max(train_data$idade), 
              length.out = 50),
  pressao_repouso = seq(min(train_data$pressao_repouso),
                        max(train_data$pressao_repouso),
                        length.out = 50)
)

# Adicionar sexo
grid_data$sexo <- "Masculino"  

# Adicionar uma frequência cardíaca média como exemplo
grid_data$freq_cardiaca_max <- mean(train_data$freq_cardiaca_max,
                                    na.rm = TRUE)

# Previsão com base nos valores do grid
grid_data$colesterol_pred <- predict(multiple_model, newdata = grid_data)

# Gráfico interativo 
fig <- plot_ly()

# Adicionar pontos reais
fig <- fig %>%
  add_markers(
    x = train_data$idade,
    y = train_data$pressao_repouso,
    z = train_data$colesterol,
    marker = list(color = "red", size = 3),
    name = "Dados Reais"
  )

# Adicionar superfície do modelo
fig <- fig %>%
  add_surface(
    x = ~unique(grid_data$idade),
    y = ~unique(grid_data$pressao_repouso),
    z = ~matrix(grid_data$colesterol_pred, nrow = 50),
    colorscale = "Viridis",
    opacity = 0.7,
    colorbar = list(title = " "), 
    name = "Modelo"
  )

# Layout
fig <- fig %>%
  layout(
    scene = list(
      xaxis = list(title = "Idade"),
      yaxis = list(title = "Pressão de Repouso"),
      zaxis = list(title = "Colesterol")
    )
  )

fig
```

### Visualização dos residuos

```{r}
# Verificação dos resíduos
residuals <- augment(multiple_model) %>%
  select(.fitted, .resid)

ggplot(residuals, aes(x = .fitted, y = .resid)) +
  geom_point() +
  labs(
    title = "Resíduos da Regressão Múltipla",
    x = "Valores Ajustados",
    y = "Resíduos"
  ) +
  theme_minimal()

```

## Modelo Não Linear

**Objetivo**: Modelar a relação entre idade e frequência cardíaca usando uma curva polinomial.

### Modelagem

```{r}
# Ajuste do modelo polinomial
nonlinear_model <- lm(freq_cardiaca_max ~ poly(idade, 3), data = dados)

# Resumo do modelo
summary(nonlinear_model)

#Previsão 
dados <- dados %>%
  mutate(freq_cardiaca_pred = predict(nonlinear_model, newdata = dados))
```

### Visualização

```{r}
ggplot(dados, aes(x = idade, y = freq_cardiaca_max)) +
  geom_point(color = "darkblue", size = 2, alpha = 0.7) +
  geom_line(aes(y = freq_cardiaca_pred), color = "firebrick", size = 1.2) +
  labs(
    title = "Modelo Não Linear: Frequência Cardíaca vs Idade",
    x = "Idade",
    y = "Frequência Cardíaca Máxima"
  ) +
  theme_minimal()
```

### Comparação

```{r, echo = FALSE}
# Comparação de R²
cat("Regressão Linear Simples: R² =", summary(linear_model)$r.squared, "\n")
cat("Regressão Linear Múltipla: R² =", summary(multiple_model)$r.squared, "\n")
cat("Modelo Não Linear: R² =", summary(nonlinear_model)$r.squared, "\n")

```
